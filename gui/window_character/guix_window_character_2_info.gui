##################################################
# GUIX # SECTION 2 --- NAME | TRAITS | SKILLS | COA
##################################################

types CharacterWindow {
	type guix_window_character_2_info = hbox {
		name = "character_info"
		layoutpolicy_horizontal = expanding
		margin = { 0 5 }
		margin_left = 5
		margin_bottom = 8

		background = {
			using = Background_Area_Dark
			margin_left = 5
		}

		# GUIX # ALL CONTENTS (left of COA)
		##################################################
		vbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				name = "name_and_traits"
				layoutpolicy_horizontal = expanding

				using = Animation_Character_Window_Refresh


				vbox = {
					name = "name_etc"
					layoutpolicy_horizontal = expanding

					# GUIX # NAME | AGE | HEALTH or SKULL ICON
					##################################################
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 3 0 }
						margin_top = 1

						# GUIX # NAME
						text_single = {
							name = "character_name"
							raw_text = "[Character.GetUINameNotMeNoTooltip]"
							margin_left = 2
							minimumsize = { 0 25 }
							maximumsize = { 410 25 }
							#max_width = 400 # GUIX # vanilla setting causes slight shift on long names
							fontsize = 20
							using = Font_Size_Medium
							align = nobaseline
							default_format = "#medium"
							tooltip = "[Character.GetUINameNotMeNoTooltip]"
						}
						# GUIX # AGE
						text_single = {
							name = "character_age"
							raw_text = " â€¢ [Character.GetAge]"
							tooltip = "[Character.GetDeathOrBirthDateInfo]"
							fontsize = 16
							align = nobaseline
						}
				
						# GUIX # HEALTH or SKULL ICON
						hbox = {
							margin_left = 4
							spacing = -3
				
							icon = {
								visible = "[Not(Character.IsDeadAndValid)]"
								size = { 23 23 }
								framesize = { 60 60 }
								frame = "[Character.GetHealthIconFrame]"
								texture = "gfx/interface/icons/character_status/icon_health.dds"
								tooltip = "[Character.GetHealthInfo]"
							}
							icon = {
								visible = "[Character.IsDeadAndValid]"
								size = { 23 23 }
								texture = "gfx/interface/icons/character_status/icon_dead.dds"
								tooltip = "CHARACTER_DEAD_TOOLTIP"
							}
						}
						expand = {}
					}				

					hbox_character_relation_and_ai = {
						name = "character_relation_and_ai"
						margin = { 3 0 }
					}
					
				}

				# GUIX # TRAITS & MODIFIERS
				##################################################
				guix_hbox_traits_list = {					
					name = "tutorial_highlight_traits"
					datacontext = "[CharacterWindow.GetTraitArrays]"
					margin_bottom = 3	
				}

			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			## Skills, Culture, Religion
			hbox = {
				name = "skills_culture_religion"
				layoutpolicy_horizontal = expanding


				background = {
					using = Background_Area
				}

				hbox = {
					name = "tutorial_highlight_skills"

					hbox = {
						name = "skills_grid"
						datamodel = "[CharacterWindow.GetSkills]"
						margin = { 2 0 }
						spacing = 2

						using = Animation_Character_Window_Refresh

						item = {
							vbox = {
								tooltip = "SKILL_ITEM_TOOLTIP"
								using = tooltip_ne

								icon = {
									name = "skill_icon"
									size = { 32 32 }
									framesize = { 60 60 }
									frame = "[SkillItem.GetFrame]"
									texture = "gfx/interface/icons/icon_skills.dds"
								}

								text_single = {
									name = "skill_value"
									text = "[SkillItem.GetValue]"
									default_format = "#high"
									align = nobaseline

									background = {
										name = "skill_icon_bg"
										texture = "gfx/interface/window_character/character_view_skills_bg.dds"
										frame = "[SkillItem.GetFrame]"
										framesize = { 67 26 }
										using = Mask_Rough_Edges
										margin = { 12 3 }
									}
								}
							}
						}
					}

					vbox = {
						tooltip = "[CharacterWindow.GetCharacter.GetProwessBreakdown]"
						using = tooltip_ne
						margin_bottom = -2
						spacing = -2

						using = Animation_Character_Window_Refresh

						icon = {
							name = "prowess_icon"
							size = { 30 30 }
							texture = "gfx/interface/icons/icon_prowess.dds"
						}

						# GUIX # PROWESS
						widget = {
							size = { 32 25 }
				
							text_single = {
								name = "value"
								parentanchor = center
								margin_bottom = 5
								align = center
								text = "[Character.GetSkill('prowess')]"
								default_format = "#black;glow_color:{0,0,0,0.4}"
								fontsize = 18								
								tooltip = "prowess_concept"
							}
				
							background = {
								name = "skill_icon_bg"
								texture = "gfx/interface/icons/icon_prowess_bg.dds"
								framesize = { 67 26 }
								using = Mask_Rough_Edges
								margin = { 2 2 }
								alpha = 1
							}
						}
					}
					spacer = {
						size = { 5 0 }
					}

					#Administrative Efficiency
					vbox = {
						visible = "[Or( Character.GetGovernment.HasRule( 'administrative' ), And( And( Not( Character.HasLandedTitles ), Not( Character.HasLiege ) ), GetPlayer.GetGovernment.HasRule( 'administrative' ) ) )]"
						
						tooltip = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT"
						using = tooltip_ne
						margin_bottom = 0
						spacing = -2

						using = Animation_Character_Window_Refresh

						icon = {
							name = "char_governor_efficiency_icon"
							size = { 32 32 }
							texture = "gfx/interface/icons/icon_skill_governor_efficiency.dds"
						}

						text_single = {
							name = "char_governor_efficiency_value"
							text = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_VALUE"
							align = nobaseline
						}
					}
					spacer = {
						size = { 3 0 }
					}
					divider_light = {
						layoutpolicy_vertical = expanding
					}						
				}

				# GUIX # FAITH & CULTURE
				##################################################
				hbox = {
					name = "faith_and_culture"
					layoutpolicy_horizontal = expanding
					margin_top = 4
					using = Animation_Character_Window_Refresh

					spacer = {
						size = { 3 0 }
					}

					# GUIX # TRAITS BUTTONS
					##################################################
					hbox = {
						datamodel = "[TraitArrays.GetTraits]"
						datacontext = "[CharacterWindow.GetTraitArrays]"
						visible = "[Or(Not(IsDataModelEmpty(TraitArrays.GetPersonalityTraits)),Not(IsDataModelEmpty(TraitArrays.GetTraits)))]"
						# GUIX # TRAITS DEFAULT
						button = {
							texture = "gfx/interface/icons/custom/guix_traits.dds"
							visible = "[Or(GetVariableSystem.HasValue('guix_tab','family'),Or(GetVariableSystem.HasValue('guix_tab','relations'),Or(GetVariableSystem.HasValue('guix_tab','court'),Or(GetVariableSystem.HasValue('guix_tab','vassals'),Or(GetVariableSystem.HasValue('guix_tab','diplomacy'),Or(GetVariableSystem.HasValue('guix_tab','titles'),Or(GetVariableSystem.HasValue('guix_tab','claims'),GetVariableSystem.HasValue('guix_tab','modifiers'))))))))]"
							size = { 35 35 }

							enabled = "[Or(Not(IsDataModelEmpty(TraitArrays.GetPersonalityTraits)),Not(IsDataModelEmpty(TraitArrays.GetTraits)))]"
							onclick = "[GetVariableSystem.Set('guix_tab','traits')]"
							
							tooltip = "GUIX_SHOW_TRAITS"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}			
						button = {
							texture = "gfx/interface/icons/custom/guix_traits_bw.dds"
							size = { 35 35 }
							visible = "[GetVariableSystem.HasValue('guix_tab','traits')]"

							onclick = "[GetVariableSystem.Set('guix_tab','diplomacy')]"
							
							tooltip = "CLOSE_LABEL"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}
						# GUIX # TRAITS EXPANDED
						button = {
							texture = "gfx/interface/icons/custom/guix_traits.dds"
							visible = "[Or(GetVariableSystem.HasValue('guix_tab','family_expanded'),Or(GetVariableSystem.HasValue('guix_tab','relations_expanded'),Or(GetVariableSystem.HasValue('guix_tab','court_expanded'),Or(GetVariableSystem.HasValue('guix_tab','vassals_expanded'),Or(GetVariableSystem.HasValue('guix_tab','diplomacy_expanded'),Or(GetVariableSystem.HasValue('guix_tab','titles_expanded'),Or(GetVariableSystem.HasValue('guix_tab','claims_expanded'),GetVariableSystem.HasValue('guix_tab','modifiers_expanded'))))))))]"
							
							size = { 35 35 }

							enabled = "[Or(Not(IsDataModelEmpty(TraitArrays.GetPersonalityTraits)),Not(IsDataModelEmpty(TraitArrays.GetTraits)))]"
							onclick = "[GetVariableSystem.Set('guix_tab','traits_expanded')]"
							
							tooltip = "GUIX_SHOW_TRAITS"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}
						button = {
							texture = "gfx/interface/icons/custom/guix_traits_bw.dds"
							size = { 35 35 }
							visible = "[GetVariableSystem.HasValue('guix_tab','traits_expanded')]"

							onclick = "[GetVariableSystem.Set('guix_tab','diplomacy_expanded')]"
							
							tooltip = "CLOSE_LABEL"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}						
					}
					# GUIX # NO TRAITS BUTTONS
					##################################################
					hbox = {
						datamodel = "[TraitArrays.GetTraits]"
						datacontext = "[CharacterWindow.GetTraitArrays]"
						visible = "[And(IsDataModelEmpty(TraitArrays.GetPersonalityTraits),IsDataModelEmpty(TraitArrays.GetTraits))]"
						# GUIX # TRAITS DISABLED
						button = {
							texture = "gfx/interface/icons/custom/guix_traits.dds"
							size = { 35 35 }
							
							tooltip = "GUIX_NO_TRAITS"
							using = tooltip_ne
							tooltip_offset = { 25 5 }

							enabled = no
						}					
					}

					spacer = {
						size = { 3 0 }
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						size = { 3 0 }
					}

					spacer = {
						size = { 3 0 }
					}
					# GUIX # MODIFIERS BUTTONS
					##################################################
					hbox = {
						visible = "[Not(IsDataModelEmpty(CharacterWindow.GetTimedModifiers))]"
						# GUIX # MODIFIERS DEFAULT			
						button = {
							texture = "gfx/interface/icons/custom/guix_modifiers.dds"
							size = { 35 35 }
							visible = "[Or(GetVariableSystem.HasValue('guix_tab','family'),Or(GetVariableSystem.HasValue('guix_tab','relations'),Or(GetVariableSystem.HasValue('guix_tab','court'),Or(GetVariableSystem.HasValue('guix_tab','vassals'),Or(GetVariableSystem.HasValue('guix_tab','diplomacy'),Or(GetVariableSystem.HasValue('guix_tab','titles'),Or(GetVariableSystem.HasValue('guix_tab','claims'),GetVariableSystem.HasValue('guix_tab','traits'))))))))]"

							onclick = "[GetVariableSystem.Set('guix_tab','modifiers')]"
							
							tooltip = "GUIX_SHOW_MODIFIERS"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}
						button = {
							texture = "gfx/interface/icons/custom/guix_modifiers_bw.dds"
							size = { 35 35 }
							visible = "[GetVariableSystem.HasValue('guix_tab','modifiers')]"

							onclick = "[GetVariableSystem.Set('guix_tab','diplomacy')]"
							
							tooltip = "CLOSE_LABEL"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}
						# GUIX # MODIFIERS EXPANDED			
						button = {
							texture = "gfx/interface/icons/custom/guix_modifiers.dds"
							size = { 35 35 }
							visible = "[Or(GetVariableSystem.HasValue('guix_tab','family_expanded'),Or(GetVariableSystem.HasValue('guix_tab','relations_expanded'),Or(GetVariableSystem.HasValue('guix_tab','court_expanded'),Or(GetVariableSystem.HasValue('guix_tab','vassals_expanded'),Or(GetVariableSystem.HasValue('guix_tab','diplomacy_expanded'),Or(GetVariableSystem.HasValue('guix_tab','titles_expanded'),Or(GetVariableSystem.HasValue('guix_tab','claims_expanded'),GetVariableSystem.HasValue('guix_tab','traits_expanded'))))))))]"

							onclick = "[GetVariableSystem.Set('guix_tab','modifiers_expanded')]"
							
							tooltip = "GUIX_SHOW_MODIFIERS"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}
						button = {
							texture = "gfx/interface/icons/custom/guix_modifiers_bw.dds"
							size = { 35 35 }
							visible = "[GetVariableSystem.HasValue('guix_tab','modifiers_expanded')]"

							onclick = "[GetVariableSystem.Set('guix_tab','diplomacy_expanded')]"
							
							tooltip = "CLOSE_LABEL"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
						}						
					}
					# GUIX # NO MODIFIERS BUTTONS
					##################################################
					hbox = {
						visible = "[IsDataModelEmpty(CharacterWindow.GetTimedModifiers)]"
						# GUIX # MODIFIERS DEFAULT			
						button = {
							texture = "gfx/interface/icons/custom/guix_modifiers.dds"
							size = { 35 35 }
							
							tooltip = "GUIX_NO_MODIFIERS"
							using = tooltip_ne
							tooltip_offset = { 25 5 }
							
							enabled = no
						}					
					}					
					spacer = {
						size = { 3 0 }
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						size = { 3 0 }
					}
					button_religion_icon = {
						name = "faith_button"
						datacontext = "[Character.GetFaith]"
						size = { 45 45 }
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						button_tertiary = {
							datacontext = "[Character.GetFaith]"
							layoutpolicy_horizontal = expanding
							size = { 0 25 }
							onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
							text = "FAITH_CHARACTER_WINDOW"
							default_format = "#clickable;italic"
							align = left|nobaseline

							tooltipwidget = { faith_tooltip_click = {} }
						}

						button_tertiary = {
							datacontext = "[Character.GetCulture]"
							layoutpolicy_horizontal = expanding
							size = { 0 25 }
							onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
							text = "CULTURE_CHARACTER_WINDOW"
							default_format = "#clickable;italic"
							align = left|nobaseline

							tooltipwidget = {
								culture_tooltip_click = {}
							}
						}
					}
				}

				expand = {}
			}
		}

		#divider_light = {
		#	layoutpolicy_vertical = expanding
		#}

		## House
		widget = {
			name = "house"
			datacontext = "[Character.GetHouse]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			size = { 125 0 }

			using = Animation_Character_Window_Refresh

			# GUIX # DYNASTY FLAG BACKGROUND
			# - credit to RUI modder ã‚¢ã‚¹ãƒ†ãƒªã‚ªã‚¹ for this idea!
			##################################################
			widget = {
				parentanchor = top|left
				name = "realm_coa_background"
				minimumsize = { 100 90 }

				coat_of_arms_icon = {
					datacontext = "[Character.GetDynasty]"
					parentanchor = top|right
					position = { 34 -6 }
					size = { 240 206 }

					coat_of_arms = "[Dynasty.GetDynastyCoA.GetTexture('(int32)256','(int32)256')]"
					coat_of_arms_slot = "[Dynasty.GetDynastyCoA.GetSlot('(int32)256','(int32)256')]"
					coat_of_arms_mask = "gfx/interface/frontend/mask_coa_flag.dds"

					modify_texture = {
						texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
						blend_mode = overlay
						spritetype = corneredTiled
						alpha = 0.25
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						alpha = 1
					}
				}
			}

			# GUIX # HOUSE COA & MOTTO
			##################################################
			vbox = {
				layoutpolicy_vertical = expanding

				coa_house_big = {
					flowcontainer = {

						name = "characters_status_in_house"
						parentanchor = bottom|right
						position = { -10 0 }
						ignoreinvisible = yes

						icon = {
							name = "bastard"
							visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
							framesize = { 40 40 }
							frame = 4
							size = { 20 20 }
							texture = "gfx/interface/icons/portraits/relation.dds"
							tooltip = "CV_TT_BASTARD"
						}

						icon = {
							name = "head_icon"
							visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"
							size = { 20 20 }

							texture = "gfx/interface/icons/portraits/relation.dds"
							framesize = { 40 40 }
							frame = "[Character.GetDynastyHeadRelationFrame('(bool)no')]"
							tooltip = "[Character.GetDynastyHeadTooltip]"
						}
					}
				}

				### LANDED HOUSE NAME
				text_multi = {
					autoresize = yes
					maximumsize = { 118 50 }
					text = "[DynastyHouse.GetBaseNameNoTooltip]"
					default_format = "#high"
					align = top|hcenter
				}

				# GUIX # TRADE TEXT
				##################################################
				# defines what text shows below the COA.
				# uses the same scripted gui as the COA (common/scripted_guis/unlanded_gui.txt) so COA and text always match
				text_single = {
					autoresize = yes
					maximumsize = { 118 50 }
					visible = "[Not( DynastyHouse.IsValid )]"
					text = "LOWBORN_TRADE_TYPE"
					default_format = "#medium"
					align = top|hcenter
				}

				expand = {}
					
				### LANDED HOUSE MOTTO
				text_multi = {
					visible = "[DynastyHouse.IsValid]"
					autoresize = yes
					maximumsize = { 120 60 }
					raw_text = "'[DynastyHouse.GetMotto]'"
					default_format = "#italic"
					align = top|hcenter
				}

				# GUIX # LOWBORN "EDUCATION TRAIT" MOTTO
				widget = {

					layoutpolicy_vertical = expanding
					scissor = yes
					# this is crucial to cutting off the LOWBORN "EDUCATION TRAIT" MOTTO since it's actually a full list all traits

					# GUIX # LOWBORN "EDUCATION TRAIT" MOTTO
					vbox = {						
						visible = "[And(GetScriptedGui( 'show_trade_coa_commoner' ).IsShown( GuiScope.SetRoot( CharacterWindow.GetCharacter.MakeScope ).End ),Not( DynastyHouse.IsValid ))]"
						
						spacing = 100
						datamodel = "[TraitArrays.GetTraits]"
						datacontext = "[CharacterWindow.GetTraitArrays]"
						layoutpolicy_horizontal = expanding

						item = {
							vbox = {
								layoutpolicy_horizontal = expanding

								text_multi = {											
									maximumsize = { 100 50 }
									raw_text = "'[Trait.GetNameNoTooltip(Character.Self)]'"
									default_format = "#italic"
									align = hcenter|nobaseline
									layoutpolicy_horizontal = expanding	
								}											
								expand = {}
								tooltip = "[Trait.GetFullDescription( Character.Self, Character.GetFaith )]"	
							}
						}
					}					
				}
				expand = {}
			}
		}
	}

	# GUIX # hbox_character_relation_and_ai
	####################################################################################################
	type hbox_character_relation_and_ai = hbox {
		layoutpolicy_horizontal = expanding
		spacing = 2

		hbox = {
			maximumsize = { 430 -1 }
			margin_left = 3
			text_single = {
				maximumsize = { 430 -1 }
				name = "character_relation_to_you"
				text = "[Character.GetRelationToString( GetPlayer )]"
				tooltip = "EXTENDED_RELATIONS_TOOLTIP"
				using = tooltip_se

				fontsize_min = 14
				align = nobaseline
			}

			text_single = {
				maximumsize = { 430 -1 }
				name = "other_player_name"
				visible = "[And( Character.IsPlayer, Not( Character.IsLocalPlayer ) )]"

				raw_text = " â€¢ #L [Character.GetHumanName]#!"
				tooltip = "AI_PERSONALITY_IS_PLAYER_TOOLTIP"
				using = tooltip_se

				fontsize_min = 14
				align = nobaseline
			}			
		}

		expand = {}
	}	

}
	